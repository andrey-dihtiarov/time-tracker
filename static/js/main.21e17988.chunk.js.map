{"version":3,"sources":["reportWebVitals.js","store/timer.js","store/task.js","store/store.js","utils/webStorageHelper.js","constants/routes.js","constants/colors.js","components/ClockFace/ClockFace.styles.js","components/ClockFace/ClockFace.jsx","utils/timeHelper.js","components/Button/Button.jsx","components/Modal/Modal.styles.js","components/Modal/Modal.jsx","components/Timer/Timer.styles.js","components/Timer/Timer.jsx","components/Table/Table.styles.js","components/Table/Table.jsx","components/Task/Task.styles.js","components/Task/Task.jsx","components/NotFound/NotFound.styles.js","components/NotFound/NotFound.jsx","constants/general.js","utils/chartsHelper.js","components/Chart/Chart.styles.js","components/Chart/Chart.jsx","containers/TaskContainer/TaskContainer.styles.js","containers/TaskContainer/TaskContainer.jsx","pages/MainPage/MainPage.js","pages/NotFoundPage/NotFoundPage.js","pages/TaskPage/TaskPage.jsx","routes/routes.js","App/App.js","globalStyles.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createSlice","require","INIT_STATE","name","timeStarted","timer","initialState","reducers","startTimer","state","action","payload","setTaskName","stopTimer","actions","tasks","addTask","deleteTask","filteredTasks","filter","task","id","addGeneratedTasks","preloadedState","serializedState","localStorage","getItem","JSON","parse","e","loadState","reducer","combineReducers","store","configureStore","subscribe","stringify","setItem","saveState","getState","ROUTE_LOG","ROUTE_CHART","ROUTE_TASK","ROUTE_NOT_FOUND","colors","Wrapper","styled","div","Label","input","ClockFace","children","disabled","value","formatTime","time","isUTC","moment","format","utc","getCurrentTime","Date","getTime","Button","MUIButton","DialogTitle","MUIDialogTitle","CloseButton","AgreementButton","Modal","isOpened","onClose","onSuccess","title","message","showAgreementButton","Dialog","open","fullWidth","DialogContent","DialogContentText","DialogActions","onClick","color","defaultProps","TaskNameInput","TextField","Timer","useState","setTime","isModalOpen","setIsModalOpen","useSelector","dispatch","useDispatch","timerTick","useCallback","setInterval","t","useMemo","useEffect","tick","clearInterval","placeholder","onChange","event","target","inputProps","style","textAlign","timeEnded","HeadTableCell","TableCell","BodyTableCell","BodyTableRow","TableRow","Table","deleteTaskId","setDeleteTaskId","history","useHistory","TableContainer","TableHead","TableBody","map","index","push","replace","taskId","span","Value","Card","MUICard","Typography","MUITypography","Task","useParams","CardContent","gutterBottom","variant","component","CardActions","to","Link","RouterLink","NotFound","TASKS_AMOUNT","TASK_DURATION","mapTasksForChart","chartData","Array","fill","item","minutes","newChartData","tasksByHours","startTime","endTime","startHour","Number","startMin","endHour","endMin","mapTaskByHours","forEach","hour","hoursDiff","minsSpent","diff","h","nextHour","getRandomNumber","min","max","Math","round","random","generateNewTasks","date","amountTasks","newTasks","dateInMS","getFullYear","getMonth","getDate","length","Chart","ResponsiveContainer","width","height","BarChart","data","Tooltip","Legend","CartesianGrid","stroke","XAxis","dataKey","YAxis","domain","Bar","barSize","TaskContainer","pathname","useLocation","initActiveTab","ROUTES","activeTab","setActiveTab","Tabs","backgroundColor","centered","Tab","label","minWidth","path","MainPage","Container","NotFoundPage","TaskPage","Routes","exact","App","GlobalStyle","createGlobalStyle","ReactDOM","render","StylesProvider","injectFirst","document","getElementById"],"mappings":"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","file":"static/js/main.21e17988.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const { createSlice } = require('@reduxjs/toolkit')\n\nconst INIT_STATE = {\n  name: '',\n  timeStarted: 0,\n}\n\nconst timer = createSlice({\n  name: 'timer',\n  initialState: INIT_STATE,\n  reducers: {\n    startTimer: (state, action) => ({ ...state, timeStarted: action.payload }),\n    setTaskName: (state, action) => ({ ...state, name: action.payload }),\n    stopTimer: () => INIT_STATE,\n  },\n})\n\nexport const { startTimer, setTaskName, stopTimer } = timer.actions\n\nexport default timer.reducer\n","const { createSlice } = require('@reduxjs/toolkit')\n\nconst INIT_STATE = {\n  tasks: [],\n}\n\nconst timer = createSlice({\n  name: 'task',\n  initialState: INIT_STATE,\n  reducers: {\n    addTask: (state, action) => ({ ...state, tasks: [...state.tasks, action.payload] }),\n    deleteTask: (state, action) => {\n      const filteredTasks = state.tasks.filter((task) => task.id !== action.payload)\n      return { ...state, tasks: filteredTasks }\n    },\n    addGeneratedTasks: (state, action) => ({ ...state, tasks: action.payload }),\n  },\n})\n\nexport const { addTask, deleteTask, addGeneratedTasks } = timer.actions\n\nexport default timer.reducer\n","import { configureStore, combineReducers } from '@reduxjs/toolkit'\n\nimport { loadState, saveState } from '../utils/webStorageHelper'\n\nimport timer from './timer'\nimport task from './task'\n\nconst preloadedState = loadState()\n\nconst reducer = combineReducers({\n  timer,\n  task,\n})\n\nconst store = configureStore({\n  reducer,\n  preloadedState,\n})\n\nstore.subscribe(() => {\n  saveState(store.getState())\n})\n\nexport default store\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('state')\n    if (serializedState === null) {\n      return undefined\n    }\n    return JSON.parse(serializedState)\n  } catch (e) {\n    return undefined\n  }\n}\n\nexport const saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state)\n    localStorage.setItem('state', serializedState)\n  } catch (e) {\n    //\n  }\n}\n","export const ROUTE_HOME = '/'\nexport const ROUTE_LOG = '/log'\nexport const ROUTE_CHART = '/chart'\nexport const ROUTE_TASK = '/task/:id'\nexport const ROUTE_NOT_FOUND = '/not-found'\n","export const colors = {\n  white: '#FFFFFF',\n  black: '#000000',\n  gainsboro: '#DDDDDD',\n  silver: '#BBBBBB',\n  freeSpeechBlue: '#3851CA',\n  darkGray: '#A4A4A4',\n  aliceBlue: '#EAF6FF',\n  irisBlue: '#01BCD5',\n  jazzBerryJam: '#BA074E',\n  whiteSmoke: '#F9F9F9',\n}\n","import styled from 'styled-components'\nimport { colors } from '../../constants/colors'\n\nexport const Wrapper = styled.div`\n  width: 200px;\n  height: 200px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: ${colors.white};\n  box-shadow: 0 2px 5px 1px ${colors.silver};\n  border-radius: 50%;\n`\n\nexport const Label = styled.input`\n  font-size: 30px;\n  min-width: 160px;\n  max-width: 160px;\n  display: flex;\n  justify-content: center;\n  border: none;\n  background-color: transparent;\n  text-align: center;\n  &:disabled {\n    color: ${colors.freeSpeechBlue};\n  }\n`\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Wrapper, Label } from './ClockFace.styles'\n\nconst ClockFace = ({ children }) => (\n  <Wrapper>\n    <Label disabled value={children} />\n  </Wrapper>\n)\n\nClockFace.propTypes = {\n  children: PropTypes.any.isRequired,\n}\n\nexport default ClockFace\n","import moment from 'moment'\n\nexport const formatTime = (time, isUTC = true) =>\n  isUTC ? moment(time).format('HH:mm:ss') : moment.utc(time).format('HH:mm:ss')\n\nexport const getCurrentTime = () => new Date().getTime()\n","import styled from 'styled-components'\nimport { Button as MUIButton } from '@material-ui/core'\n\nimport { colors } from '../../constants/colors'\n\nconst Button = styled(MUIButton)`\n  box-shadow: 0 0 4px 0 ${colors.silver};\n  color: ${colors.freeSpeechBlue};\n  background-color: ${colors.white};\n  font-weight: bold;\n`\n\nexport default Button\n","import styled from 'styled-components'\nimport { DialogTitle as MUIDialogTitle, Button as MUIButton } from '@material-ui/core'\nimport { colors } from '../../constants/colors'\n\nexport const DialogTitle = styled(MUIDialogTitle)`\n  color: ${colors.jazzBerryJam};\n  font-weight: bold;\n`\n\nexport const CloseButton = styled(MUIButton)`\n  color: ${colors.irisBlue};\n`\n\nexport const AgreementButton = styled(MUIButton)`\n  color: ${colors.jazzBerryJam};\n`\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Dialog, DialogActions, DialogContent, DialogContentText } from '@material-ui/core'\n\nimport { DialogTitle, CloseButton, AgreementButton } from './Modal.styles'\n\nconst Modal = ({ isOpened, onClose, onSuccess, title, message, showAgreementButton }) => (\n  <Dialog open={isOpened} onClose={onClose} fullWidth>\n    <DialogTitle>{title}</DialogTitle>\n    <DialogContent>\n      <DialogContentText>{message}</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <CloseButton onClick={onClose} color=\"primary\">\n        Close\n      </CloseButton>\n      {showAgreementButton && (\n        <AgreementButton onClick={onSuccess} color=\"primary\">\n          OK\n        </AgreementButton>\n      )}\n    </DialogActions>\n  </Dialog>\n)\n\nModal.propTypes = {\n  isOpened: PropTypes.bool,\n  showAgreementButton: PropTypes.bool,\n  onClose: PropTypes.func.isRequired,\n  onSuccess: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n  message: PropTypes.string.isRequired,\n}\n\nModal.defaultProps = {\n  isOpened: false,\n  showAgreementButton: false,\n}\n\nexport default Modal\n","import styled from 'styled-components'\nimport { TextField } from '@material-ui/core'\n\nimport { colors } from '../../constants/colors'\n\nimport { Button } from '../Button'\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  ${Button} {\n    margin-top: 20px;\n  }\n`\n\nexport const TaskNameInput = styled(TextField)`\n  margin-top: 10px;\n  margin-bottom: 20px;\n  & .MuiInputBase-root {\n    justify-content: center;\n    color: ${colors.freeSpeechBlue};\n    font-size: 14px;\n    font-weight: bold;\n    width: 260px;\n  }\n`\n","import React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { startTimer, setTaskName, stopTimer } from '../../store/timer'\nimport { addTask } from '../../store/task'\nimport { formatTime, getCurrentTime } from '../../utils/timeHelper'\nimport { colors } from '../../constants/colors'\n\nimport { ClockFace } from '../ClockFace'\nimport Button from '../Button/Button'\n\nimport { Modal } from '../Modal'\n\nimport { Wrapper, TaskNameInput } from './Timer.styles'\n\nconst Timer = () => {\n  const [time, setTime] = useState(0)\n  const [isModalOpen, setIsModalOpen] = useState(false)\n\n  const { name, timeStarted } = useSelector((state) => state.timer)\n  const dispatch = useDispatch()\n\n  const timerTick = useCallback(\n    () =>\n      setInterval(() => {\n        setTime((t) => t + 1000)\n      }, 1000),\n    [],\n  )\n\n  const timer = useMemo(() => formatTime(time, false), [time])\n\n  useEffect(() => {\n    let tick\n    if (timeStarted) {\n      setTime(getCurrentTime() - timeStarted)\n      tick = timerTick()\n    } else {\n      setTime(timeStarted)\n    }\n    return () => {\n      clearInterval(tick)\n    }\n  }, [timeStarted, timerTick])\n\n  const onStartButtonClick = () => {\n    if (timeStarted) {\n      if (!name) {\n        return setIsModalOpen(true)\n      }\n      dispatch(\n        addTask({\n          id: `${name}-${timeStarted}`,\n          timeStarted,\n          name,\n          timeEnded: getCurrentTime(),\n        }),\n      )\n      return dispatch(stopTimer())\n    }\n    return dispatch(startTimer(getCurrentTime()))\n  }\n\n  const onTaskNameChange = (event) => dispatch(setTaskName(event.target.value))\n\n  return (\n    <>\n      <Wrapper>\n        <TaskNameInput\n          placeholder=\"Enter your task name\"\n          onChange={onTaskNameChange}\n          value={name}\n          inputProps={{ style: { textAlign: 'center', color: colors.freeSpeechBlue } }}\n        />\n        <ClockFace>{timer}</ClockFace>\n        <Button onClick={onStartButtonClick}>{timeStarted ? 'STOP' : 'START'}</Button>\n      </Wrapper>\n      <Modal\n        message=\"You are trying to close your task without a name, enter the title and try again!\"\n        isOpened={isModalOpen}\n        onClose={() => setIsModalOpen(false)}\n        title=\"Empty task name\"\n        onSuccess={() => setIsModalOpen(false)}\n      />\n    </>\n  )\n}\n\nexport default Timer\n","import styled from 'styled-components'\nimport { TableCell, TableRow } from '@material-ui/core'\nimport { colors as color, colors } from '../../constants/colors'\n\nexport const Wrapper = styled.div``\n\nexport const HeadTableCell = styled(TableCell)`\n  color: ${colors.darkGray};\n  font-weight: bold;\n`\n\nexport const BodyTableCell = styled(TableCell)`\n  color: ${colors.freeSpeechBlue};\n  font-weight: bold;\n`\n\nexport const BodyTableRow = styled(TableRow)`\n  background-color: ${color.aliceBlue};\n`\n","import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\nimport {\n  Table as TaskTable,\n  TableContainer,\n  TableHead,\n  TableBody,\n  TableRow,\n} from '@material-ui/core'\n\nimport { deleteTask } from '../../store/task'\nimport { formatTime } from '../../utils/timeHelper'\nimport { ROUTE_TASK } from '../../constants/routes'\n\nimport { Button } from '../Button'\nimport { Modal } from '../Modal'\n\nimport { BodyTableCell, HeadTableCell, BodyTableRow } from './Table.styles'\n\nconst Table = () => {\n  const [deleteTaskId, setDeleteTaskId] = useState(null)\n  const [isModalOpen, setIsModalOpen] = useState(false)\n  const history = useHistory()\n  const { tasks } = useSelector((state) => state.task)\n  const dispatch = useDispatch()\n\n  const onModalSuccess = () => {\n    if (deleteTaskId) {\n      dispatch(deleteTask(deleteTaskId))\n    }\n    setDeleteTaskId(null)\n    setIsModalOpen(false)\n  }\n\n  const openAlertModal = (taskId) => {\n    setDeleteTaskId(taskId)\n    setIsModalOpen(true)\n  }\n\n  const onModalClose = () => {\n    setDeleteTaskId(null)\n    setIsModalOpen(false)\n  }\n\n  return (\n    <>\n      <TableContainer>\n        <TaskTable>\n          <TableHead>\n            <TableRow>\n              <HeadTableCell>№</HeadTableCell>\n              <HeadTableCell>Task</HeadTableCell>\n              <HeadTableCell>Time start</HeadTableCell>\n              <HeadTableCell>Time end</HeadTableCell>\n              <HeadTableCell>Time spend</HeadTableCell>\n              <HeadTableCell>Info</HeadTableCell>\n              <HeadTableCell>Delete</HeadTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {tasks.map((task, index) => (\n              <BodyTableRow key={task.id}>\n                <BodyTableCell>{index + 1}</BodyTableCell>\n                <BodyTableCell>{task.name}</BodyTableCell>\n                <BodyTableCell>{formatTime(task.timeStarted)}</BodyTableCell>\n                <BodyTableCell>{formatTime(task.timeEnded)}</BodyTableCell>\n                <BodyTableCell>\n                  {formatTime(task.timeEnded - task.timeStarted, false)}\n                </BodyTableCell>\n                <BodyTableCell>\n                  <Button onClick={() => history.push(ROUTE_TASK.replace(':id', index + 1))}>\n                    Info\n                  </Button>\n                </BodyTableCell>\n                <BodyTableCell>\n                  <Button onClick={() => openAlertModal(task.id)}>Delete</Button>\n                </BodyTableCell>\n              </BodyTableRow>\n            ))}\n          </TableBody>\n        </TaskTable>\n      </TableContainer>\n      <Modal\n        message=\"You are trying to close your task without a name, enter the title and try again!\"\n        isOpened={isModalOpen}\n        onClose={onModalClose}\n        title=\"Empty task name\"\n        onSuccess={onModalSuccess}\n        showAgreementButton\n      />\n    </>\n  )\n}\n\nexport default Table\n","import styled from 'styled-components'\nimport { Card as MUICard, Typography as MUITypography } from '@material-ui/core'\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`\n\nexport const Label = styled.span`\n  font-weight: bold;\n`\n\nexport const Value = styled.span`\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\n\nexport const Card = styled(MUICard)`\n  width: 720px;\n`\n\nexport const Typography = styled(MUITypography)`\n  display: flex;\n  justify-content: space-between;\n  //overflow: hidden;\n  //white-space: nowrap;\n`\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { useHistory, useParams, Redirect } from 'react-router-dom'\nimport { CardActions, CardContent } from '@material-ui/core'\n\nimport { formatTime } from '../../utils/timeHelper'\nimport { ROUTE_LOG, ROUTE_NOT_FOUND } from '../../constants/routes'\n\nimport { Button } from '../Button'\n\nimport { Label, Value, Card, Typography, Wrapper } from './Task.styles'\n\nconst Task = () => {\n  const history = useHistory()\n  const { id } = useParams()\n  const task = useSelector((state) => state.task.tasks[id - 1])\n\n  return (\n    <>\n      {!task ? (\n        <Redirect to={ROUTE_NOT_FOUND} />\n      ) : (\n        <Wrapper>\n          <Card>\n            <CardContent>\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                <Label>Task №:</Label>\n                <Value>{id}</Value>\n              </Typography>\n              <Typography>\n                <Label>Task Name:</Label>\n                <Value>{task.name}</Value>\n              </Typography>\n              <Typography>\n                <Label>Task Started:</Label>\n                <Value>{formatTime(task.timeStarted)}</Value>\n              </Typography>\n              <Typography>\n                <Label>Task Ended:</Label>\n                <Value>{formatTime(task.timeEnded)}</Value>\n              </Typography>\n              <Typography>\n                <Label>Task Total:</Label>\n                <Value>{formatTime(task.timeEnded - task.timeStarted, false)}</Value>\n              </Typography>\n            </CardContent>\n            <CardActions>\n              <Button onClick={() => history.push(ROUTE_LOG)}>Back</Button>\n            </CardActions>\n          </Card>\n        </Wrapper>\n      )}\n    </>\n  )\n}\n\nexport default Task\n","import styled from 'styled-components'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { colors } from '../../constants/colors'\n\nexport const Wrapper = styled.div`\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 32px;\n`\n\nexport const Link = styled(RouterLink)`\n  color: ${colors.freeSpeechBlue};\n`\n","import React from 'react'\n\nimport { ROUTE_HOME } from '../../constants/routes'\n\nimport { Wrapper, Link } from './NotFound.styles'\n\nconst NotFound = () => (\n  <Wrapper>\n    Sorry, it seems like page does not exists.<Link to={ROUTE_HOME}>Go to home page</Link>\n  </Wrapper>\n)\n\nexport default NotFound\n","export const TASKS_AMOUNT = {\n  MIN: 10,\n  MAX: 15,\n}\n\nexport const TASK_DURATION = {\n  MIN: 10,\n  AVERAGE: 50,\n  MAX: 90,\n}\n\nexport const MINUTE = 1000 * 60\n","import moment from 'moment'\nimport { MINUTE, TASK_DURATION, TASKS_AMOUNT } from '../constants/general'\n\nexport const getEmptyChartColumns = () => {\n  const numberOfHours = 24\n  return Array(numberOfHours)\n    .fill('')\n    .map((item, index) => ({ name: index, minutes: 0 }))\n}\n\nexport const mapTaskByHours = (tasks) =>\n  tasks.map((task) => ({\n    startTime: task.timeStarted,\n    endTime: task.timeEnded,\n    startHour: Number(moment(task.timeStarted).format('H')),\n    startMin: Number(moment(task.timeStarted).format('m')),\n    endHour: Number(moment(task.timeEnded).format('H')),\n    endMin: Number(moment(task.timeEnded).format('m')),\n  }))\n\nexport const mapTasksForChart = (tasks) => {\n  const chartData = getEmptyChartColumns()\n  const newChartData = [...chartData]\n  const minsInHour = 60\n  const tasksByHours = mapTaskByHours(tasks)\n\n  newChartData.forEach((hour) => {\n    const { name: startHour } = hour\n\n    tasksByHours\n      .filter((task) => task.startHour === startHour)\n      .forEach((task) => {\n        const hoursDiff = task.endHour - task.startHour\n\n        if (hoursDiff > 0) {\n          let minsSpent = moment(task.endTime).diff(moment(task.startTime), 'minutes')\n          newChartData[startHour].minutes += minsInHour - task.startMin\n          minsSpent -= minsInHour - task.startMin\n\n          const hoursDiffArray = Array(hoursDiff)\n            .fill('')\n            .map((item, index) => index + 1)\n\n          hoursDiffArray.forEach((h) => {\n            const nextHour = startHour + h\n\n            if (minsSpent < minsInHour) {\n              newChartData[nextHour].minutes += minsSpent\n              minsSpent -= minsSpent\n            } else {\n              newChartData[nextHour].minutes += minsInHour\n              minsSpent -= minsInHour\n            }\n          })\n        } else {\n          newChartData[startHour].minutes += task.endMin - task.startMin\n        }\n      })\n  })\n\n  return newChartData\n}\n\nconst getRandomNumber = (min, max) => Math.round(Math.random() * (max - min) + min)\n\nconst getRandomTime = () => getRandomNumber(TASK_DURATION.MIN, TASK_DURATION.MAX) * MINUTE\n\nconst getRandomTimeAfterPreviousTask = () =>\n  getRandomNumber(TASK_DURATION.MIN, TASK_DURATION.AVERAGE) * MINUTE\n\nexport const generateNewTasks = () => {\n  const date = new Date()\n  const amountTasks = getRandomNumber(TASKS_AMOUNT.MIN, TASKS_AMOUNT.MAX)\n  const newTasks = []\n  const dateInMS = Number(new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime())\n\n  const amountTasksArray = Array(amountTasks)\n    .fill('')\n    .map((item, index) => index)\n\n  amountTasksArray.forEach((item) => {\n    const randomTime = getRandomTime()\n    let timeStarted\n    if (!newTasks.length) {\n      timeStarted = dateInMS\n    } else {\n      timeStarted = newTasks[item - 1].timeEnded + getRandomTimeAfterPreviousTask()\n    }\n    const timeEnded = randomTime + timeStarted\n    const name = `Task-${item + 1}`\n    const id = `${name}-${timeStarted}`\n\n    newTasks.push({\n      id,\n      name,\n      timeStarted,\n      timeEnded,\n    })\n  })\n\n  return newTasks\n}\n","import styled from 'styled-components'\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`\n","import React, { useMemo, useState } from 'react'\nimport {\n  Bar,\n  BarChart,\n  CartesianGrid,\n  Legend,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { colors } from '../../constants/colors'\nimport { generateNewTasks, mapTasksForChart } from '../../utils/chartsHelper'\nimport { addGeneratedTasks } from '../../store/task'\n\nimport { Button } from '../Button'\nimport { Modal } from '../Modal'\n\nimport { Wrapper } from './Chart.styles'\n\nconst Chart = () => {\n  const [isModalOpen, setIsModalOpen] = useState(false)\n  const { tasks } = useSelector((state) => state.task)\n\n  const dispatch = useDispatch()\n\n  const chartData = useMemo(() => mapTasksForChart(tasks), [tasks])\n\n  const onGenerateClick = () => {\n    const newTasks = generateNewTasks()\n    dispatch(addGeneratedTasks(newTasks))\n    setIsModalOpen(false)\n  }\n\n  return (\n    <>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <BarChart data={chartData}>\n          <Tooltip />\n          <Legend />\n          <CartesianGrid stroke={colors.whiteSmoke} />\n          <XAxis dataKey=\"name\" />\n          <YAxis domain={[0, 60]} />\n          <Bar dataKey=\"minutes\" name=\"Minutes in hour\" barSize={20} fill={colors.freeSpeechBlue} />\n        </BarChart>\n      </ResponsiveContainer>\n      <Wrapper>\n        <Button onClick={() => setIsModalOpen(true)}>Generate</Button>\n      </Wrapper>\n      <Modal\n        message=\"Are you sure you want to generate new tasks? All previous tasks will be erased!\"\n        isOpened={isModalOpen}\n        onClose={() => setIsModalOpen(false)}\n        title=\"All previous tasks will be erased\"\n        onSuccess={onGenerateClick}\n        showAgreementButton\n      />\n    </>\n  )\n}\n\nexport default Chart\n","import styled from 'styled-components'\nimport { colors } from '../../constants/colors'\n\nexport const Wrapper = styled.div`\n  margin-top: 20px;\n  color: ${colors.white};\n`\n","import React, { useMemo, useState } from 'react'\nimport { Route, Switch, useHistory, useLocation } from 'react-router-dom'\nimport { Tab, Tabs } from '@material-ui/core'\n\nimport { colors } from '../../constants/colors'\nimport * as ROUTES from '../../constants/routes'\n\nimport { Table, Chart } from '../../components'\n\nimport { Wrapper } from './TaskContainer.styles'\n\nconst TaskContainer = () => {\n  const history = useHistory()\n  const { pathname } = useLocation()\n\n  const initActiveTab = useMemo(() => {\n    if (pathname === ROUTES.ROUTE_LOG) {\n      return 0\n    }\n    if (pathname === ROUTES.ROUTE_CHART) {\n      return 1\n    }\n    return 0\n  }, [pathname])\n\n  const [activeTab, setActiveTab] = useState(initActiveTab)\n\n  const onTabChange = (event, value) => {\n    setActiveTab(value)\n    if (value === 1) {\n      return history.push(ROUTES.ROUTE_CHART)\n    }\n    return history.push(ROUTES.ROUTE_LOG)\n  }\n\n  return (\n    <Wrapper>\n      <Tabs\n        value={activeTab}\n        onChange={onTabChange}\n        style={{ backgroundColor: colors.irisBlue }}\n        centered\n      >\n        <Tab label=\"Tasks Log\" fullWidth style={{ minWidth: '50%' }} />\n        <Tab label=\"Tasks Chart\" fullWidth style={{ minWidth: '50%' }} />\n      </Tabs>\n      <Switch>\n        <Route path={ROUTES.ROUTE_LOG} component={Table} />\n        <Route path={ROUTES.ROUTE_CHART} component={Chart} />\n        <Route component={Table} />\n      </Switch>\n    </Wrapper>\n  )\n}\n\nexport default TaskContainer\n","import React from 'react'\nimport { Container } from '@material-ui/core'\n\nimport { Timer } from '../../components'\nimport { TaskContainer } from '../../containers'\n\nconst MainPage = () => (\n  <Container>\n    <Timer />\n    <TaskContainer />\n  </Container>\n)\n\nexport default MainPage\n","import React from 'react'\n\nimport { NotFound } from '../../components'\n\nconst NotFoundPage = () => <NotFound />\n\nexport default NotFoundPage\n","import React from 'react'\n\nimport { Task } from '../../components'\n\nconst TaskPage = () => <Task />\n\nexport default TaskPage\n","import React from 'react'\nimport { Switch, Route, BrowserRouter, Redirect } from 'react-router-dom'\n\nimport * as ROUTES from '../constants/routes'\n\nimport { MainPage, NotFoundPage, TaskPage } from '../pages'\n\nconst Routes = () => (\n  <BrowserRouter>\n    <Switch>\n      <Switch>\n        <Route exact path={ROUTES.ROUTE_TASK} component={TaskPage} />\n        <Route\n          exact\n          path={[ROUTES.ROUTE_HOME, ROUTES.ROUTE_LOG, ROUTES.ROUTE_CHART]}\n          component={MainPage}\n        />\n        <Route exact path={ROUTES.ROUTE_NOT_FOUND} component={NotFoundPage} />\n        <Redirect to={ROUTES.ROUTE_NOT_FOUND} />\n      </Switch>\n    </Switch>\n  </BrowserRouter>\n)\n\nexport default Routes\n","import React from 'react'\n\nimport { Container } from '@material-ui/core'\nimport { Routes } from '../routes'\n\nconst App = () => (\n  <Container>\n    <Routes />\n  </Container>\n)\n\nexport default App\n","import { createGlobalStyle } from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle`\n  html, body {\n    min-height: 100%;\n    font-size: 14px;\n    -webkit-tap-highlight-color: transparent;\n  }\n\n  body {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n  \n  h1, h2, h3 {\n    padding: 0;\n    margin: 0;\n    border: 0;\n  }\n  \n  * { \n    box-sizing: border-box;\n    outline: none;\n  }\n  \n  *, ::before, ::after {\n    box-sizing: border-box;\n    outline: none;\n  }\n  \n  a {\n    color: #fff;\n    text-decoration: none;\n    background-color: transparent;\n    outline: 0;\n    cursor: pointer;\n  }\n`\n\nexport default GlobalStyle\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { StylesProvider } from '@material-ui/core/styles'\n\nimport reportWebVitals from './reportWebVitals'\n\nimport store from './store/store'\n\nimport App from './App/App'\nimport GlobalStyle from './globalStyles'\n\nReactDOM.render(\n  <Provider store={store}>\n    <StylesProvider injectFirst>\n      <GlobalStyle />\n      <App />\n    </StylesProvider>\n  </Provider>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}