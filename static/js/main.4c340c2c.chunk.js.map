{"version":3,"sources":["reportWebVitals.js","store/timer.js","store/task.js","store/store.js","utils/webStorageHelper.js","constants/routes.js","constants/colors.js","components/ClockFace/ClockFace.styles.js","components/ClockFace/ClockFace.jsx","utils/timeHelper.js","components/Button/Button.jsx","components/Modal/Modal.styles.js","components/Modal/Modal.jsx","components/Timer/Timer.styles.js","components/Timer/Timer.jsx","components/Table/Table.styles.js","components/Table/Table.jsx","components/Task/Task.styles.js","components/Task/Task.jsx","components/NotFound/NotFound.styles.js","components/NotFound/NotFound.jsx","constants/general.js","utils/chartsHelper.js","components/Chart/Chart.styles.js","components/Chart/Chart.jsx","containers/TaskContainer/TaskContainer.styles.js","containers/TaskContainer/TaskContainer.jsx","pages/MainPage/MainPage.js","pages/NotFoundPage/NotFoundPage.js","pages/TaskPage/TaskPage.jsx","routes/routes.js","App/App.js","globalStyles.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createSlice","require","INIT_STATE","name","timeStarted","timer","initialState","reducers","startTimer","state","action","payload","setTaskName","stopTimer","actions","tasks","addTask","deleteTask","filteredTasks","filter","task","id","addGeneratedTasks","preloadedState","serializedState","localStorage","getItem","JSON","parse","e","loadState","reducer","combineReducers","store","configureStore","subscribe","stringify","setItem","saveState","getState","ROUTE_LOG","ROUTE_CHART","ROUTE_TASK","ROUTE_NOT_FOUND","colors","Wrapper","styled","div","Label","input","ClockFace","children","disabled","value","formatTime","time","isUTC","moment","format","utc","getCurrentTime","Date","getTime","Button","MUIButton","DialogTitle","MUIDialogTitle","CloseButton","AgreementButton","Modal","isOpened","onClose","onSuccess","title","message","showAgreementButton","Dialog","open","fullWidth","DialogContent","DialogContentText","DialogActions","onClick","color","defaultProps","TaskNameInput","TextField","Timer","useState","setTime","isModalOpen","setIsModalOpen","useSelector","dispatch","useDispatch","timerTick","useCallback","setInterval","t","useMemo","useEffect","tick","timePassed","clearInterval","onModalClose","placeholder","onChange","event","target","timeEnded","HeadTableCell","TableCell","BodyTableCell","BodyTableRow","TableRow","NoTasks","TABLE_HEADERS","Table","deleteTaskId","setDeleteTaskId","history","useHistory","onInfoClick","index","push","replace","onDeleteClick","taskId","openAlertModal","length","TableContainer","TableHead","map","header","TableBody","span","Value","Card","MUICard","Typography","MUITypography","Task","useParams","CardContent","gutterBottom","variant","component","CardActions","to","Link","RouterLink","NotFound","TASKS_AMOUNT","TASK_DURATION","getRandomNumber","min","max","Math","round","random","calculateMinsSpent","minsSpent","subValue","subtracted","mapTasksForChart","chartData","Array","fill","item","minutes","newChartData","tasksByHours","startTime","endTime","startHour","Number","startMin","endHour","endMin","mapTaskByHours","forEach","hour","hoursDiff","minutesSpent","diff","h","nextHour","generateNewTasks","date","amountTasks","newTasks","dateInMS","getFullYear","getMonth","getDate","DOMAIN","CONTAINER_SIZES","Chart","ResponsiveContainer","width","height","BarChart","data","Tooltip","Legend","CartesianGrid","stroke","XAxis","dataKey","YAxis","domain","Bar","barSize","Tabs","MUITabs","Tab","MUITab","TABS","TaskContainer","pathname","useLocation","getActiveTab","ROUTES","initActiveTab","activeTab","setActiveTab","currentTab","centered","label","path","MainPage","Container","NotFoundPage","TaskPage","Routes","exact","App","GlobalStyle","createGlobalStyle","ReactDOM","render","StylesProvider","injectFirst","document","getElementById"],"mappings":"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","file":"static/js/main.4c340c2c.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","const { createSlice } = require('@reduxjs/toolkit')\r\n\r\nconst INIT_STATE = {\r\n  name: '',\r\n  timeStarted: 0,\r\n}\r\n\r\nconst timer = createSlice({\r\n  name: 'timer',\r\n  initialState: INIT_STATE,\r\n  reducers: {\r\n    startTimer: (state, action) => ({ ...state, timeStarted: action.payload }),\r\n    setTaskName: (state, action) => ({ ...state, name: action.payload }),\r\n    stopTimer: () => INIT_STATE,\r\n  },\r\n})\r\n\r\nexport const { startTimer, setTaskName, stopTimer } = timer.actions\r\n\r\nexport default timer.reducer\r\n","const { createSlice } = require('@reduxjs/toolkit')\r\n\r\nconst INIT_STATE = {\r\n  tasks: [],\r\n}\r\n\r\nconst timer = createSlice({\r\n  name: 'task',\r\n  initialState: INIT_STATE,\r\n  reducers: {\r\n    addTask: (state, action) => ({ ...state, tasks: [...state.tasks, action.payload] }),\r\n    deleteTask: (state, action) => {\r\n      const filteredTasks = state.tasks.filter((task) => task.id !== action.payload)\r\n      return { ...state, tasks: filteredTasks }\r\n    },\r\n    addGeneratedTasks: (state, action) => ({ ...state, tasks: action.payload }),\r\n  },\r\n})\r\n\r\nexport const { addTask, deleteTask, addGeneratedTasks } = timer.actions\r\n\r\nexport default timer.reducer\r\n","import { configureStore, combineReducers } from '@reduxjs/toolkit'\r\n\r\nimport { loadState, saveState } from '../utils/webStorageHelper'\r\n\r\nimport timer from './timer'\r\nimport task from './task'\r\n\r\nconst preloadedState = loadState()\r\n\r\nconst reducer = combineReducers({\r\n  timer,\r\n  task,\r\n})\r\n\r\nconst store = configureStore({\r\n  reducer,\r\n  preloadedState,\r\n})\r\n\r\nstore.subscribe(() => {\r\n  saveState(store.getState())\r\n})\r\n\r\nexport default store\r\n","export const loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem('state')\r\n    if (serializedState === null) {\r\n      return undefined\r\n    }\r\n    return JSON.parse(serializedState)\r\n  } catch (e) {\r\n    return undefined\r\n  }\r\n}\r\n\r\nexport const saveState = (state) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state)\r\n    localStorage.setItem('state', serializedState)\r\n  } catch (e) {\r\n    //\r\n  }\r\n}\r\n","export const ROUTE_HOME = '/'\r\nexport const ROUTE_LOG = '/log'\r\nexport const ROUTE_CHART = '/chart'\r\nexport const ROUTE_TASK = '/task/:id'\r\nexport const ROUTE_NOT_FOUND = '/not-found'\r\n","export const colors = {\r\n  white: '#FFFFFF',\r\n  black: '#000000',\r\n  gainsboro: '#DDDDDD',\r\n  silver: '#BBBBBB',\r\n  freeSpeechBlue: '#3851CA',\r\n  darkGray: '#A4A4A4',\r\n  aliceBlue: '#EAF6FF',\r\n  irisBlue: '#01BCD5',\r\n  jazzBerryJam: '#BA074E',\r\n  whiteSmoke: '#F9F9F9',\r\n}\r\n","import styled from 'styled-components'\r\nimport { colors } from '../../constants/colors'\r\n\r\nexport const Wrapper = styled.div`\r\n  width: 200px;\r\n  height: 200px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: ${colors.white};\r\n  box-shadow: 0 2px 5px 1px ${colors.silver};\r\n  border-radius: 50%;\r\n`\r\n\r\nexport const Label = styled.input`\r\n  font-size: 30px;\r\n  min-width: 160px;\r\n  max-width: 160px;\r\n  display: flex;\r\n  justify-content: center;\r\n  border: none;\r\n  background-color: transparent;\r\n  text-align: center;\r\n  &:disabled {\r\n    color: ${colors.freeSpeechBlue};\r\n  }\r\n`\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { Wrapper, Label } from './ClockFace.styles'\r\n\r\nconst ClockFace = ({ children }) => (\r\n  <Wrapper>\r\n    <Label disabled value={children} />\r\n  </Wrapper>\r\n)\r\n\r\nClockFace.propTypes = {\r\n  children: PropTypes.any.isRequired,\r\n}\r\n\r\nexport default ClockFace\r\n","import moment from 'moment'\r\n\r\nexport const formatTime = (time, isUTC = true) =>\r\n  isUTC ? moment(time).format('HH:mm:ss') : moment.utc(time).format('HH:mm:ss')\r\n\r\nexport const getCurrentTime = () => new Date().getTime()\r\n","import styled from 'styled-components'\r\nimport { Button as MUIButton } from '@material-ui/core'\r\n\r\nimport { colors } from '../../constants/colors'\r\n\r\nconst Button = styled(MUIButton)`\r\n  box-shadow: 0 0 4px 0 ${colors.silver};\r\n  color: ${colors.freeSpeechBlue};\r\n  background-color: ${colors.white};\r\n  font-weight: bold;\r\n`\r\n\r\nexport default Button\r\n","import styled from 'styled-components'\r\nimport { DialogTitle as MUIDialogTitle, Button as MUIButton } from '@material-ui/core'\r\nimport { colors } from '../../constants/colors'\r\n\r\nexport const DialogTitle = styled(MUIDialogTitle)`\r\n  color: ${colors.jazzBerryJam};\r\n  font-weight: bold;\r\n`\r\n\r\nexport const CloseButton = styled(MUIButton)`\r\n  color: ${colors.irisBlue};\r\n`\r\n\r\nexport const AgreementButton = styled(MUIButton)`\r\n  color: ${colors.jazzBerryJam};\r\n`\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Dialog, DialogActions, DialogContent, DialogContentText } from '@material-ui/core'\r\n\r\nimport { DialogTitle, CloseButton, AgreementButton } from './Modal.styles'\r\n\r\nconst Modal = ({ isOpened, onClose, onSuccess, title, message, showAgreementButton }) => (\r\n  <Dialog open={isOpened} onClose={onClose} fullWidth>\r\n    <DialogTitle>{title}</DialogTitle>\r\n    <DialogContent>\r\n      <DialogContentText>{message}</DialogContentText>\r\n    </DialogContent>\r\n    <DialogActions>\r\n      <CloseButton onClick={onClose} color=\"primary\">\r\n        Close\r\n      </CloseButton>\r\n      {showAgreementButton && (\r\n        <AgreementButton onClick={onSuccess} color=\"primary\">\r\n          OK\r\n        </AgreementButton>\r\n      )}\r\n    </DialogActions>\r\n  </Dialog>\r\n)\r\n\r\nModal.propTypes = {\r\n  isOpened: PropTypes.bool,\r\n  showAgreementButton: PropTypes.bool,\r\n  onClose: PropTypes.func.isRequired,\r\n  onSuccess: PropTypes.func.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  message: PropTypes.string.isRequired,\r\n}\r\n\r\nModal.defaultProps = {\r\n  isOpened: false,\r\n  showAgreementButton: false,\r\n}\r\n\r\nexport default Modal\r\n","import styled from 'styled-components'\r\nimport { TextField } from '@material-ui/core'\r\n\r\nimport { colors } from '../../constants/colors'\r\n\r\nimport { Button } from '../Button'\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  ${Button} {\r\n    margin-top: 20px;\r\n  }\r\n`\r\n\r\nexport const TaskNameInput = styled(TextField)`\r\n  margin-top: 10px;\r\n  margin-bottom: 20px;\r\n  text-align: center;\r\n  & .MuiInputBase-root {\r\n    justify-content: center;\r\n    color: ${colors.freeSpeechBlue};\r\n    font-size: 14px;\r\n    font-weight: bold;\r\n    width: 260px;\r\n    & .MuiInputBase-input {\r\n      text-align: center;\r\n    }\r\n  }\r\n`\r\n","import React, { useCallback, useEffect, useMemo, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { startTimer, setTaskName, stopTimer } from '../../store/timer'\r\nimport { addTask } from '../../store/task'\r\nimport { formatTime, getCurrentTime } from '../../utils/timeHelper'\r\n\r\nimport { ClockFace } from '../ClockFace'\r\nimport Button from '../Button/Button'\r\n\r\nimport { Modal } from '../Modal'\r\n\r\nimport { Wrapper, TaskNameInput } from './Timer.styles'\r\n\r\nconst SECOND = 1000\r\n\r\nconst Timer = () => {\r\n  const [time, setTime] = useState(0)\r\n  const [isModalOpen, setIsModalOpen] = useState(false)\r\n\r\n  const { name, timeStarted } = useSelector((state) => state.timer)\r\n  const dispatch = useDispatch()\r\n\r\n  const timerTick = useCallback(\r\n    () =>\r\n      setInterval(() => {\r\n        setTime((t) => t + SECOND)\r\n      }, SECOND),\r\n    [],\r\n  )\r\n\r\n  const timer = useMemo(() => formatTime(time, false), [time])\r\n\r\n  useEffect(() => {\r\n    let tick\r\n    const timePassed = getCurrentTime() - timeStarted\r\n    if (timeStarted) {\r\n      setTime(timePassed)\r\n      tick = timerTick()\r\n    } else {\r\n      setTime(timeStarted)\r\n    }\r\n    return () => {\r\n      clearInterval(tick)\r\n    }\r\n  }, [timeStarted, timerTick])\r\n\r\n  const onStartButtonClick = () => {\r\n    if (timeStarted) {\r\n      if (!name) {\r\n        return setIsModalOpen(true)\r\n      }\r\n      dispatch(\r\n        addTask({\r\n          id: `${name}-${timeStarted}`,\r\n          timeStarted,\r\n          name,\r\n          timeEnded: getCurrentTime(),\r\n        }),\r\n      )\r\n      return dispatch(stopTimer())\r\n    }\r\n    return dispatch(startTimer(getCurrentTime()))\r\n  }\r\n\r\n  const onTaskNameChange = (event) => dispatch(setTaskName(event.target.value))\r\n\r\n  const onModalClose = () => setIsModalOpen(false)\r\n\r\n  return (\r\n    <>\r\n      <Wrapper>\r\n        <TaskNameInput\r\n          placeholder=\"Enter your task name\"\r\n          onChange={onTaskNameChange}\r\n          value={name}\r\n        />\r\n        <ClockFace>{timer}</ClockFace>\r\n        <Button onClick={onStartButtonClick}>{timeStarted ? 'STOP' : 'START'}</Button>\r\n      </Wrapper>\r\n      <Modal\r\n        message=\"You are trying to close your task without a name, enter the title and try again!\"\r\n        isOpened={isModalOpen}\r\n        onClose={onModalClose}\r\n        title=\"Empty task name\"\r\n        onSuccess={onModalClose}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Timer\r\n","import styled from 'styled-components'\r\nimport { TableCell, TableRow } from '@material-ui/core'\r\nimport { colors as color, colors } from '../../constants/colors'\r\n\r\nexport const Wrapper = styled.div``\r\n\r\nexport const HeadTableCell = styled(TableCell)`\r\n  color: ${colors.darkGray};\r\n  font-weight: bold;\r\n`\r\n\r\nexport const BodyTableCell = styled(TableCell)`\r\n  color: ${colors.freeSpeechBlue};\r\n  font-weight: bold;\r\n`\r\n\r\nexport const BodyTableRow = styled(TableRow)`\r\n  background-color: ${color.aliceBlue};\r\n`\r\n\r\nexport const NoTasks = styled.div`\r\n  width: 100%;\r\n  margin: 15px;\r\n  text-align: center;\r\n  font-size: 28px;\r\n  color: ${colors.darkGray};\r\n`\r\n","import React, { useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport {\r\n  Table as TaskTable,\r\n  TableContainer,\r\n  TableHead,\r\n  TableBody,\r\n  TableRow,\r\n} from '@material-ui/core'\r\n\r\nimport { deleteTask } from '../../store/task'\r\nimport { formatTime } from '../../utils/timeHelper'\r\nimport { ROUTE_TASK } from '../../constants/routes'\r\n\r\nimport { Button } from '../Button'\r\nimport { Modal } from '../Modal'\r\n\r\nimport { BodyTableCell, HeadTableCell, BodyTableRow, NoTasks } from './Table.styles'\r\n\r\nconst TABLE_HEADERS = ['№', 'Task', 'Task start', 'Task end', 'Task spent', 'Info', 'Delete']\r\n\r\nconst Table = () => {\r\n  const [deleteTaskId, setDeleteTaskId] = useState(null)\r\n  const [isModalOpen, setIsModalOpen] = useState(false)\r\n  const history = useHistory()\r\n  const { tasks } = useSelector((state) => state.task)\r\n  const dispatch = useDispatch()\r\n\r\n  const onModalSuccess = () => {\r\n    if (deleteTaskId) {\r\n      dispatch(deleteTask(deleteTaskId))\r\n    }\r\n    setDeleteTaskId(null)\r\n    setIsModalOpen(false)\r\n  }\r\n\r\n  const openAlertModal = (taskId) => {\r\n    setDeleteTaskId(taskId)\r\n    setIsModalOpen(true)\r\n  }\r\n\r\n  const onModalClose = () => {\r\n    setDeleteTaskId(null)\r\n    setIsModalOpen(false)\r\n  }\r\n\r\n  const onInfoClick = (index) => () => history.push(ROUTE_TASK.replace(':id', index + 1))\r\n\r\n  const onDeleteClick = (taskId) => () => openAlertModal(taskId)\r\n\r\n  return (\r\n    <>\r\n      {!tasks.length ? (\r\n        <NoTasks>There are no tasks yet!</NoTasks>\r\n      ) : (\r\n        <TableContainer>\r\n          <TaskTable>\r\n            <TableHead>\r\n              <TableRow>\r\n                {TABLE_HEADERS.map((header) => (\r\n                  <HeadTableCell key={header}>{header}</HeadTableCell>\r\n                ))}\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {tasks.map((task, index) => (\r\n                <BodyTableRow key={task.id}>\r\n                  <BodyTableCell>{index + 1}</BodyTableCell>\r\n                  <BodyTableCell>{task.name}</BodyTableCell>\r\n                  <BodyTableCell>{formatTime(task.timeStarted)}</BodyTableCell>\r\n                  <BodyTableCell>{formatTime(task.timeEnded)}</BodyTableCell>\r\n                  <BodyTableCell>\r\n                    {formatTime(task.timeEnded - task.timeStarted, false)}\r\n                  </BodyTableCell>\r\n                  <BodyTableCell>\r\n                    <Button onClick={onInfoClick(index)}>Info</Button>\r\n                  </BodyTableCell>\r\n                  <BodyTableCell>\r\n                    <Button onClick={onDeleteClick(task.id)}>Delete</Button>\r\n                  </BodyTableCell>\r\n                </BodyTableRow>\r\n              ))}\r\n            </TableBody>\r\n          </TaskTable>\r\n        </TableContainer>\r\n      )}\r\n      <Modal\r\n        message=\"You are trying to close your task without a name, enter the title and try again!\"\r\n        isOpened={isModalOpen}\r\n        onClose={onModalClose}\r\n        title=\"Empty task name\"\r\n        onSuccess={onModalSuccess}\r\n        showAgreementButton\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Table\r\n","import styled from 'styled-components'\r\nimport { Card as MUICard, Typography as MUITypography } from '@material-ui/core'\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n`\r\n\r\nexport const Label = styled.span`\r\n  font-weight: bold;\r\n`\r\n\r\nexport const Value = styled.span`\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n`\r\n\r\nexport const Card = styled(MUICard)`\r\n  width: 720px;\r\n`\r\n\r\nexport const Typography = styled(MUITypography)`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  //overflow: hidden;\r\n  //white-space: nowrap;\r\n`\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { useHistory, useParams, Redirect } from 'react-router-dom'\r\nimport { CardActions, CardContent } from '@material-ui/core'\r\n\r\nimport { formatTime } from '../../utils/timeHelper'\r\nimport { ROUTE_LOG, ROUTE_NOT_FOUND } from '../../constants/routes'\r\n\r\nimport { Button } from '../Button'\r\n\r\nimport { Label, Value, Card, Typography, Wrapper } from './Task.styles'\r\n\r\nconst Task = () => {\r\n  const history = useHistory()\r\n  const { id } = useParams()\r\n  const task = useSelector((state) => state.task.tasks[id - 1])\r\n\r\n  const onBackClick = () => history.push(ROUTE_LOG)\r\n\r\n  return (\r\n    <>\r\n      {!task ? (\r\n        <Redirect to={ROUTE_NOT_FOUND} />\r\n      ) : (\r\n        <Wrapper>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                <Label>Task №:</Label>\r\n                <Value>{id}</Value>\r\n              </Typography>\r\n              <Typography>\r\n                <Label>Task Name:</Label>\r\n                <Value>{task.name}</Value>\r\n              </Typography>\r\n              <Typography>\r\n                <Label>Task Started:</Label>\r\n                <Value>{formatTime(task.timeStarted)}</Value>\r\n              </Typography>\r\n              <Typography>\r\n                <Label>Task Ended:</Label>\r\n                <Value>{formatTime(task.timeEnded)}</Value>\r\n              </Typography>\r\n              <Typography>\r\n                <Label>Task Total:</Label>\r\n                <Value>{formatTime(task.timeEnded - task.timeStarted, false)}</Value>\r\n              </Typography>\r\n            </CardContent>\r\n            <CardActions>\r\n              <Button onClick={onBackClick}>Back</Button>\r\n            </CardActions>\r\n          </Card>\r\n        </Wrapper>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Task\r\n","import styled from 'styled-components'\r\nimport { Link as RouterLink } from 'react-router-dom'\r\nimport { colors } from '../../constants/colors'\r\n\r\nexport const Wrapper = styled.div`\r\n  height: 100vh;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 32px;\r\n`\r\n\r\nexport const Link = styled(RouterLink)`\r\n  color: ${colors.freeSpeechBlue};\r\n`\r\n","import React from 'react'\r\n\r\nimport { ROUTE_HOME } from '../../constants/routes'\r\n\r\nimport { Wrapper, Link } from './NotFound.styles'\r\n\r\nconst NotFound = () => (\r\n  <Wrapper>\r\n    Sorry, it seems like page does not exists.<Link to={ROUTE_HOME}>Go to home page</Link>\r\n  </Wrapper>\r\n)\r\n\r\nexport default NotFound\r\n","export const TASKS_AMOUNT = {\r\n  MIN: 10,\r\n  MAX: 15,\r\n}\r\n\r\nexport const TASK_DURATION = {\r\n  MIN: 10,\r\n  AVERAGE: 50,\r\n  MAX: 90,\r\n}\r\n\r\nexport const MINUTE = 1000 * 60\r\n","import moment from 'moment'\r\n\r\nimport { MINUTE, TASK_DURATION, TASKS_AMOUNT } from '../constants/general'\r\n\r\nexport const getRandomNumber = (min, max) => Math.round(Math.random() * (max - min) + min)\r\n\r\nexport const getRandomTime = () => getRandomNumber(TASK_DURATION.MIN, TASK_DURATION.MAX) * MINUTE\r\n\r\nexport const getRandomTimeAfterPreviousTask = () =>\r\n  getRandomNumber(TASK_DURATION.MIN, TASK_DURATION.AVERAGE) * MINUTE\r\n\r\nexport const getEmptyChartColumns = () => {\r\n  const numberOfHours = 24\r\n  return Array(numberOfHours)\r\n    .fill('')\r\n    .map((item, index) => ({ name: index, minutes: 0 }))\r\n}\r\n\r\nexport const mapTaskByHours = (tasks) =>\r\n  tasks.map((task) => ({\r\n    startTime: task.timeStarted,\r\n    endTime: task.timeEnded,\r\n    startHour: Number(moment(task.timeStarted).format('H')),\r\n    startMin: Number(moment(task.timeStarted).format('m')),\r\n    endHour: Number(moment(task.timeEnded).format('H')),\r\n    endMin: Number(moment(task.timeEnded).format('m')),\r\n  }))\r\n\r\nexport const calculateMinsSpent = (minsSpent, subValue) => {\r\n  if (minsSpent < 0) {\r\n    return 0\r\n  }\r\n  const subtracted = minsSpent - subValue\r\n  if (subtracted < 0) {\r\n    return 0\r\n  }\r\n  return subtracted\r\n}\r\n\r\nexport const mapTasksForChart = (tasks) => {\r\n  const chartData = getEmptyChartColumns()\r\n  const newChartData = [...chartData]\r\n  const minutesInHour = 60\r\n  const tasksByHours = mapTaskByHours(tasks)\r\n\r\n  chartData.forEach((hour) => {\r\n    const { name: startHour } = hour\r\n\r\n    tasksByHours\r\n      .filter((task) => task.startHour === startHour)\r\n      .forEach((task) => {\r\n        const hoursDiff = task.endHour - task.startHour\r\n\r\n        if (hoursDiff > 0) {\r\n          let minutesSpent = moment(task.endTime).diff(moment(task.startTime), 'minutes')\r\n          newChartData[startHour].minutes += minutesInHour - task.startMin\r\n          minutesSpent = calculateMinsSpent(minutesSpent, minutesInHour - task.startMin)\r\n\r\n          const hoursDiffArray = Array(hoursDiff)\r\n            .fill('')\r\n            .map((item, index) => index + 1)\r\n\r\n          hoursDiffArray.forEach((h) => {\r\n            const nextHour = startHour + h\r\n\r\n            if (minutesSpent < minutesInHour) {\r\n              newChartData[nextHour].minutes += minutesSpent\r\n              minutesSpent = calculateMinsSpent(minutesSpent, minutesSpent)\r\n            } else {\r\n              newChartData[nextHour].minutes += minutesInHour\r\n              minutesSpent = calculateMinsSpent(minutesSpent, minutesInHour)\r\n            }\r\n          })\r\n        } else {\r\n          newChartData[startHour].minutes += task.endMin - task.startMin\r\n        }\r\n      })\r\n  })\r\n\r\n  return newChartData\r\n}\r\n\r\nexport const generateNewTasks = () => {\r\n  const date = new Date()\r\n  const amountTasks = getRandomNumber(TASKS_AMOUNT.MIN, TASKS_AMOUNT.MAX)\r\n  const newTasks = []\r\n  const dateInMS = Number(new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime())\r\n\r\n  const amountTasksArray = Array(amountTasks)\r\n    .fill('')\r\n    .map((item, index) => index)\r\n\r\n  amountTasksArray.forEach((item) => {\r\n    const randomTime = getRandomTime()\r\n    let timeStarted\r\n    if (!newTasks.length) {\r\n      timeStarted = dateInMS\r\n    } else {\r\n      timeStarted = newTasks[item - 1].timeEnded + getRandomTimeAfterPreviousTask()\r\n    }\r\n    const timeEnded = randomTime + timeStarted\r\n    const name = `Task-${item + 1}`\r\n    const id = `${name}-${timeStarted}`\r\n\r\n    newTasks.push({\r\n      id,\r\n      name,\r\n      timeStarted,\r\n      timeEnded,\r\n    })\r\n  })\r\n\r\n  return newTasks\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n`\r\n","import React, { useMemo, useState } from 'react'\r\nimport {\r\n  Bar,\r\n  BarChart,\r\n  CartesianGrid,\r\n  ResponsiveContainer,\r\n  Legend,\r\n  Tooltip,\r\n  XAxis,\r\n  YAxis,\r\n} from 'recharts'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport { colors } from '../../constants/colors'\r\nimport { generateNewTasks, mapTasksForChart } from '../../utils/chartsHelper'\r\nimport { addGeneratedTasks } from '../../store/task'\r\n\r\nimport { Button } from '../Button'\r\nimport { Modal } from '../Modal'\r\n\r\nimport { Wrapper } from './Chart.styles'\r\n\r\nconst BAR_SIZE = 20\r\nconst DOMAIN = [0, 60]\r\nconst CONTAINER_SIZES = {\r\n  width: '100%',\r\n  height: 300,\r\n}\r\n\r\nconst Chart = () => {\r\n  const [isModalOpen, setIsModalOpen] = useState(false)\r\n  const { tasks } = useSelector((state) => state.task)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const chartData = useMemo(() => mapTasksForChart(tasks), [tasks])\r\n\r\n  const onModalAgreement = () => {\r\n    const newTasks = generateNewTasks()\r\n    dispatch(addGeneratedTasks(newTasks))\r\n    setIsModalOpen(false)\r\n  }\r\n\r\n  const onModalClose = () => setIsModalOpen(false)\r\n\r\n  const onGenerateClick = () => setIsModalOpen(true)\r\n\r\n  return (\r\n    <>\r\n      <ResponsiveContainer width={CONTAINER_SIZES.width} height={CONTAINER_SIZES.height}>\r\n        <BarChart data={chartData}>\r\n          <Tooltip />\r\n          <Legend />\r\n          <CartesianGrid stroke={colors.whiteSmoke} />\r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis domain={DOMAIN} />\r\n          <Bar\r\n            dataKey=\"minutes\"\r\n            name=\"Minutes in hour\"\r\n            barSize={BAR_SIZE}\r\n            fill={colors.freeSpeechBlue}\r\n          />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n      <Wrapper>\r\n        <Button onClick={onGenerateClick}>Generate</Button>\r\n      </Wrapper>\r\n      <Modal\r\n        message=\"Are you sure you want to generate new tasks? All previous tasks will be erased!\"\r\n        isOpened={isModalOpen}\r\n        onClose={onModalClose}\r\n        title=\"All previous tasks will be erased\"\r\n        onSuccess={onModalAgreement}\r\n        showAgreementButton\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Chart\r\n","import styled from 'styled-components'\r\nimport { Tab as MUITab, Tabs as MUITabs } from '@material-ui/core'\r\n\r\nimport { colors } from '../../constants/colors'\r\n\r\nexport const Wrapper = styled.div`\r\n  margin-top: 20px;\r\n  color: ${colors.white};\r\n`\r\n\r\nexport const Tabs = styled(MUITabs)`\r\n  background-color: ${colors.irisBlue};\r\n`\r\n\r\nexport const Tab = styled(MUITab)`\r\n  min-width: 50%;\r\n`\r\n","import React, { useCallback, useEffect, useMemo, useState } from 'react'\r\nimport { Route, Switch, useHistory, useLocation } from 'react-router-dom'\r\n\r\nimport * as ROUTES from '../../constants/routes'\r\n\r\nimport { Table, Chart } from '../../components'\r\n\r\nimport { Wrapper, Tabs, Tab } from './TaskContainer.styles'\r\n\r\nconst TABS = {\r\n  logTab: 0,\r\n  chartTab: 1,\r\n}\r\n\r\nconst TaskContainer = () => {\r\n  const history = useHistory()\r\n  const { pathname } = useLocation()\r\n\r\n  const getActiveTab = useCallback(() => {\r\n    if (pathname === ROUTES.ROUTE_LOG) {\r\n      return TABS.logTab\r\n    }\r\n    if (pathname === ROUTES.ROUTE_CHART) {\r\n      return TABS.chartTab\r\n    }\r\n    return TABS.logTab\r\n  }, [pathname])\r\n\r\n  const initActiveTab = useMemo(() => getActiveTab(), [getActiveTab])\r\n\r\n  const [activeTab, setActiveTab] = useState(initActiveTab)\r\n\r\n  useEffect(() => {\r\n    const currentTab = getActiveTab()\r\n    setActiveTab(currentTab)\r\n  }, [getActiveTab])\r\n\r\n  const onTabChange = (event, value) => {\r\n    if (value === TABS.chartTab) {\r\n      return history.push(ROUTES.ROUTE_CHART)\r\n    }\r\n    return history.push(ROUTES.ROUTE_LOG)\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Tabs value={activeTab} onChange={onTabChange} centered>\r\n        <Tab label=\"Tasks Log\" fullWidth />\r\n        <Tab label=\"Tasks Chart\" fullWidth />\r\n      </Tabs>\r\n      <Switch>\r\n        <Route path={ROUTES.ROUTE_LOG} component={Table} />\r\n        <Route path={ROUTES.ROUTE_CHART} component={Chart} />\r\n        <Route component={Table} />\r\n      </Switch>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default TaskContainer\r\n","import React from 'react'\r\nimport { Container } from '@material-ui/core'\r\n\r\nimport { Timer } from '../../components'\r\nimport { TaskContainer } from '../../containers'\r\n\r\nconst MainPage = () => (\r\n  <Container>\r\n    <Timer />\r\n    <TaskContainer />\r\n  </Container>\r\n)\r\n\r\nexport default MainPage\r\n","import React from 'react'\r\n\r\nimport { NotFound } from '../../components'\r\n\r\nconst NotFoundPage = () => <NotFound />\r\n\r\nexport default NotFoundPage\r\n","import React from 'react'\r\n\r\nimport { Task } from '../../components'\r\n\r\nconst TaskPage = () => <Task />\r\n\r\nexport default TaskPage\r\n","import React from 'react'\r\nimport { Switch, Route, HashRouter, Redirect } from 'react-router-dom'\r\n\r\nimport * as ROUTES from '../constants/routes'\r\n\r\nimport { MainPage, NotFoundPage, TaskPage } from '../pages'\r\n\r\nconst Routes = () => (\r\n  <HashRouter>\r\n    <Switch>\r\n      <Switch>\r\n        <Route exact path={ROUTES.ROUTE_TASK} component={TaskPage} />\r\n        <Route\r\n          exact\r\n          path={[ROUTES.ROUTE_HOME, ROUTES.ROUTE_LOG, ROUTES.ROUTE_CHART]}\r\n          component={MainPage}\r\n        />\r\n        <Route exact path={ROUTES.ROUTE_NOT_FOUND} component={NotFoundPage} />\r\n        <Redirect to={ROUTES.ROUTE_NOT_FOUND} />\r\n      </Switch>\r\n    </Switch>\r\n  </HashRouter>\r\n)\r\n\r\nexport default Routes\r\n","import React from 'react'\r\n\r\nimport { Container } from '@material-ui/core'\r\nimport { Routes } from '../routes'\r\n\r\nconst App = () => (\r\n  <Container>\r\n    <Routes />\r\n  </Container>\r\n)\r\n\r\nexport default App\r\n","import { createGlobalStyle } from 'styled-components'\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  html, body {\r\n    min-height: 100%;\r\n    font-size: 14px;\r\n    -webkit-tap-highlight-color: transparent;\r\n  }\r\n\r\n  body {\r\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\r\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n    sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  }\r\n  \r\n  h1, h2, h3 {\r\n    padding: 0;\r\n    margin: 0;\r\n    border: 0;\r\n  }\r\n  \r\n  * { \r\n    box-sizing: border-box;\r\n    outline: none;\r\n  }\r\n  \r\n  *, ::before, ::after {\r\n    box-sizing: border-box;\r\n    outline: none;\r\n  }\r\n  \r\n  a {\r\n    color: #fff;\r\n    text-decoration: none;\r\n    background-color: transparent;\r\n    outline: 0;\r\n    cursor: pointer;\r\n  }\r\n`\r\n\r\nexport default GlobalStyle\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport { StylesProvider } from '@material-ui/core/styles'\r\n\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nimport store from './store/store'\r\n\r\nimport App from './App/App'\r\nimport GlobalStyle from './globalStyles'\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <StylesProvider injectFirst>\r\n      <GlobalStyle />\r\n      <App />\r\n    </StylesProvider>\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}